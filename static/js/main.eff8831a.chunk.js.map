{"version":3,"sources":["assets/logo.svg","components/InputForm.js","components/TokenDisplay.js","nzbbtef/colours/transforms.js","nzbbtef/1-colourTransform.js","nzbbtef/2-tokenise.js","nzbbtef/colours/library.js","nzbbtef/3-getColours.js","components/NZBBTEFVisualise.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Form","props","handleChange","bind","event","this","onFieldChange","target","value","className","htmlFor","id","type","name","onChange","Component","TokenRow","token","key","line","col","colour","label","style","background","tokenised","tokens","TokenTable","map","longColours","Metal","Uncoloured","Black","Grey","White","Red","Orange","Yellow","Pink","Crimson","Purple","Blue","Green","Brown","longCombinedColours","metal","uncoloured","paleorange","neonorange","fluoroorange","palepink","neonpink","fluoropink","hotpink","crimson","darkpink","lightpurple","paleblue","lightblue","mediumblue","darkblue","neongreen","fluorogreen","lightgreen","limegreen","palegreen","mediumgreen","darkgreen","black","grey","white","red","orange","yellow","pink","purple","blue","green","brown","transform","nzbbtef","colours","Object","keys","reduce","currentSearch","replace","RegExp","colourTransform","symbolBandiser","moo","symbol","match","symbolColour","bandColour","WS","error","idBandiser","inscription","tokeniser","symbolBand","partSeparator","bandSeparator","legSeparator","colouredIdBand","uncolouredIdBand","nullBand","colouredBand","tokenise","reset","Array","from","assign","colourLibrary","M","PO","NO","PP","NP","LPu","PB","LB","B","DB","NG","LG","PG","G","DG","K","Gr","W","R","O","Y","P","CP","Pu","Br","getColours","isColourToken","includes","NZBBTEFVisualise","state","handleNZBBTEFChange","setState","one","two","three","InputForm","length","App","src","logo","alt","href","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.eff8831a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.9e343206.svg\";","import React, { Component } from 'react';\n\nclass Form extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleChange(event) {\n    this.props.onFieldChange(event.target.value);\n  }\n\n  render() {\n    return (\n      <form>\n        <div className=\"form-group\">\n          <label htmlFor=\"nzbbtef\">NZBBTEF</label>\n          <input\n            className=\"form-control\"\n            id=\"nzbbtef\"\n            type=\"text\"\n            name=\"nzbbtef\"\n            value={this.props.value}\n            onChange={this.handleChange}\n          />\n        </div>\n      </form>\n    );\n  }\n}\n\nexport default Form;\n","import React from 'react';\n\nimport './TokenDisplay.css';\n\nconst TokenRow = ({ token }) => (\n  <div className=\"col-sm-auto my-1\" key={`${token.line}:${token.col}`}>\n    <div className={`card ${token.type}`}>\n      <div className=\"card-body\">\n        <div className=\"token\">\n          {token.colour ? (\n            <div className=\"colour\">\n              {token.colour.label}{' '}\n              <div className=\"sample\" style={{ background: token.colour.value }} />\n            </div>\n          ) : (\n            <div className=\"value text-monospace\">\n              <strong>{token.value}</strong>\n            </div>\n          )}\n          <div className=\"metadata\">\n            <small>\n              {token.type} ({token.col})\n            </small>\n          </div>\n        </div>\n        {token.tokenised && <TokenTable tokens={token.tokenised} />}\n      </div>\n    </div>\n  </div>\n);\n\nconst TokenTable = ({ tokens }) => (\n  <div className=\"form-row my-n1\">\n    {tokens.map(\n      token => token.type !== 'WS' && <TokenRow token={token} key={`${token.line}:${token.col}`} />\n    )}\n  </div>\n);\n\nexport default TokenTable;\n","// Order is important (from most specific to least specific, e.g. Pale Orange before Orange)\n\nconst longColours = {\n  Metal: 'M',\n  Uncoloured: 'M',\n  'Pale Orange': 'PO',\n  'Neon Orange': 'NO',\n  'Fluoro Orange': 'NO',\n  'Pale Pink': 'PP',\n  'Neon Pink': 'NP',\n  'Fluoro Pink': 'NP',\n  'Hot Pink': 'NP',\n  'Dark Pink': 'CP',\n  'Pale Blue': 'PB',\n  'Light Blue': 'LB',\n  'Medium Blue': 'B',\n  'Dark Blue': 'DB',\n  'Neon Green': 'NG',\n  'Fluoro Green': 'NG',\n  'Light Green': 'LG',\n  'Lime Green': 'LG',\n  'Pale Green': 'PG',\n  'Medium Green': 'G',\n  'Dark Green': 'DG',\n  'Light Purple': 'LPu',\n  Black: 'K',\n  Grey: 'Gr',\n  White: 'W',\n  Red: 'R',\n  Orange: 'O',\n  Yellow: 'Y',\n  Pink: 'P',\n  Crimson: 'CP',\n  Purple: 'Pu',\n  Blue: 'B',\n  Green: 'G',\n  Brown: 'Br',\n};\n\nconst longCombinedColours = {\n  metal: 'M',\n  uncoloured: 'M',\n  paleorange: 'PO',\n  neonorange: 'NO',\n  fluoroorange: 'NO',\n  palepink: 'PP',\n  neonpink: 'NP',\n  fluoropink: 'NP',\n  hotpink: 'NP',\n  crimson: 'CP',\n  darkpink: 'CP',\n  lightpurple: 'LPu',\n  paleblue: 'PB',\n  lightblue: 'LB',\n  mediumblue: 'B',\n  darkblue: 'DB',\n  neongreen: 'NG',\n  fluorogreen: 'NG',\n  lightgreen: 'LG',\n  limegreen: 'LG',\n  palegreen: 'PG',\n  mediumgreen: 'G',\n  darkgreen: 'DG',\n  black: 'K',\n  grey: 'Gr',\n  white: 'W',\n  red: 'R',\n  orange: 'O',\n  yellow: 'Y',\n  pink: 'P',\n  purple: 'Pu',\n  blue: 'B',\n  green: 'G',\n  brown: 'Br',\n};\n\nconst shortColours = {\n  M: 'Metal',\n  PO: 'Pale Orange',\n  NO: 'Neon Orange',\n  PP: 'Pale Pink',\n  NP: 'Neon Pink',\n  LPu: 'Light Purple',\n  PB: 'Pale Blue',\n  LB: 'Light Blue',\n  B: 'Medium Blue',\n  DB: 'Dark Blue',\n  NG: 'Neon Green',\n  LG: 'Light Green',\n  PG: 'Pale Green',\n  G: 'Medium Green',\n  DG: 'Dark Green',\n  K: 'Black',\n  Gr: 'Grey',\n  W: 'White',\n  R: 'Red',\n  O: 'Orange',\n  Y: 'Yellow',\n  P: 'Pink',\n  CP: 'Crimson',\n  Pu: 'Purple',\n  Br: 'Brown',\n};\n\nexport { longColours, longCombinedColours, shortColours };\n","import { longColours, longCombinedColours } from './colours/transforms';\n\n/**\n This function iterates over the colour object given, doing a (word bounded) find/replace.\n - Use of \\b necessary to not transform PaleBlue to PaleB\n - Double backslash because string escaping necessary\n */\nconst transform = (nzbbtef, colours) =>\n  Object.keys(colours).reduce(\n    (nzbbtef, currentSearch) =>\n      nzbbtef.replace(new RegExp(`\\\\b${currentSearch}\\\\b`, 'gi'), colours[currentSearch]),\n    nzbbtef\n  );\n\nconst colourTransform = nzbbtef => transform(transform(nzbbtef, longColours), longCombinedColours);\n\nexport default colourTransform;\n","import * as moo from 'moo';\n\nlet symbolBandiser = moo.compile({\n  symbol: { match: /\\S+\\son\\s/, value: value => value.match(/\\S+/)[0] },\n  symbolColour: /^[a-zA-Z]+/,\n  bandColour: /[a-zA-Z]+$/,\n  WS: /[ \\t]+/,\n  error: moo.error,\n});\n\nlet idBandiser = moo.compile({\n  bandColour: /^[a-zA-Z]+/,\n  inscription: { match: /\\(\\S+\\)/, value: value => value.match(/[^()]+/)[0] },\n  error: moo.error,\n});\n\nlet tokeniser = moo.compile({\n  symbolBand: /\\w+\\s\\S+\\son\\s\\w+/,\n  partSeparator: /\\/\\//,\n  bandSeparator: /\\//,\n  legSeparator: /-/,\n  colouredIdBand: /[a-zA-Z]+\\(\\S+\\)/,\n  uncolouredIdBand: /\\(\\S+\\)/,\n  nullBand: /x/,\n  colouredBand: /[a-zA-Z]+/,\n  WS: /[ \\t]+/,\n  error: moo.error,\n});\n\n/**\n Tokenise the string using `moo` as per the rules defined above, then further process certain types further.\n */\nconst tokenise = nzbbtef => {\n  tokeniser.reset(nzbbtef);\n\n  return Array.from(tokeniser).map(token => {\n    // If nested token, initialise tokeniser\n    switch (token.type) {\n      case 'symbolBand':\n        symbolBandiser.reset(token.value);\n        break;\n      case 'uncolouredIdBand':\n        idBandiser.reset(`M${token.value}`);\n        break;\n      case 'colouredIdBand':\n        idBandiser.reset(token.value);\n        break;\n      default:\n        break;\n    }\n\n    // Depending on type, use tokeniser (as initialised) or otherwise just return the token as is\n    switch (token.type) {\n      case 'symbolBand':\n        return Object.assign(\n          {},\n          token,\n          { type: 'tokenisedSymbolBand' },\n          { tokenised: Array.from(symbolBandiser) }\n        );\n      case 'uncolouredIdBand':\n      case 'colouredIdBand':\n        return Object.assign(\n          {},\n          token,\n          { type: 'tokenisedIdBand' },\n          { tokenised: Array.from(idBandiser) }\n        );\n      default:\n        return token;\n    }\n  });\n};\n\nexport default tokenise;\n","const colourLibrary = {\n  M: {\n    label: 'Metal',\n    value: 'linear-gradient(to right,#808080, #ddd, #808080)',\n  },\n  PO: {\n    label: 'Pale Orange',\n    value: '#FFD03B',\n  },\n  NO: {\n    label: 'Neon Orange',\n    value: '#FFB343',\n  },\n  PP: {\n    label: 'Pale Pink',\n    value: '#FBC6B7',\n  },\n  NP: {\n    label: 'Neon Pink',\n    value: '#FF4BF2',\n  },\n  LPu: {\n    label: 'Light Purple',\n    value: '#AE5DFF',\n  },\n  PB: {\n    label: 'Pale Blue',\n    value: '#9EC7F8',\n  },\n  LB: {\n    label: 'Light Blue',\n    value: '#2B8FB3',\n  },\n  B: {\n    label: 'Medium Blue',\n    value: '#2B8FB3',\n  },\n  DB: {\n    label: 'Dark Blue',\n    value: '#0000D6',\n  },\n  NG: {\n    label: 'Neon Green',\n    value: '#00FF00',\n  },\n  LG: {\n    label: 'Light Green',\n    value: '#ABFE82',\n  },\n  PG: {\n    label: 'Pale Green',\n    value: '#4DC350',\n  },\n  G: {\n    label: 'Medium Green',\n    value: '#00A800',\n  },\n  DG: {\n    label: 'Dark Green',\n    value: '#003A00',\n  },\n  K: {\n    label: 'Black',\n    value: '#000000',\n  },\n  Gr: {\n    label: 'Grey',\n    value: '#808080',\n  },\n  W: {\n    label: 'White',\n    value: '#ffffff',\n  },\n  R: {\n    label: 'Red',\n    value: '#DA0000',\n  },\n  O: {\n    label: 'Orange',\n    value: '#FF6600',\n  },\n  Y: {\n    label: 'Yellow',\n    value: '#F4EE00',\n  },\n  P: {\n    label: 'Pink',\n    value: '#FE94FE',\n  },\n  CP: {\n    label: 'Crimson',\n    value: '#CC044B',\n  },\n  Pu: {\n    label: 'Purple',\n    value: '#9900CC',\n  },\n  Br: {\n    label: 'Brown',\n    value: '#996633',\n  },\n};\n\nexport default colourLibrary;\n","import colourLibrary from './colours/library';\n\nconst getColours = tokens => {\n  return tokens.map(token => {\n    const isColourToken = ['symbolColour', 'bandColour', 'colouredBand'].includes(token.type);\n\n    return Object.assign(\n      {},\n      token,\n      isColourToken && { colour: colourLibrary[token.value] },\n      token.tokenised && { tokenised: getColours(token.tokenised) }\n    );\n  });\n};\nexport default getColours;\n","import React, { Component } from 'react';\n\nimport InputForm from './InputForm';\nimport TokenTable from './TokenDisplay';\n\nimport colourTransform from '../nzbbtef/1-colourTransform';\nimport tokenise from '../nzbbtef/2-tokenise';\nimport getColours from '../nzbbtef/3-getColours';\n\nclass NZBBTEFVisualise extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      nzbbtef: '',\n    };\n\n    this.handleNZBBTEFChange = this.handleNZBBTEFChange.bind(this);\n  }\n\n  handleNZBBTEFChange(nzbbtef) {\n    this.setState({ nzbbtef: nzbbtef });\n  }\n\n  render() {\n    const one = colourTransform(this.state.nzbbtef);\n    const two = tokenise(one);\n    const three = getColours(two);\n\n    return (\n      <div className=\"nzbbtef\">\n        <section className=\"my-5\">\n          <h2>Input</h2>\n          <p>Enter a band combo in NZBBTEF format.</p>\n          <InputForm onFieldChange={this.handleNZBBTEFChange} value={this.state.nzbbtef} />\n        </section>\n        <section className=\"my-5\">\n          <h2>1. Colour Transformation</h2>\n          <p>\n            The first step is to convert long colour names into short colour names.\n            <br />\n            This is so that colours with one words (e.g. Dark Green) can be appropriately processed.\n          </p>\n          <div className=\"row\">\n            <div className=\"col-md-8 mb-3\">\n              <div className=\"card\">\n                <div className=\"card-body\">\n                  {one ? <samp>{one}</samp> : <span>No input specified</span>}\n                </div>\n              </div>\n            </div>\n            <div className=\"col-md-4 small\">\n              <ol>\n                <li>Colours can be written as one or one words (Pale Blue or PaleBlue)</li>\n                <li>Colour names are case insensitive</li>\n                <li>\n                  Colour names will not feature elsewhere (e.g. as symbols or as inscriptions)\n                </li>\n              </ol>\n            </div>\n          </div>\n        </section>\n        <section className=\"my-5\">\n          <h2>2. Tokenisation</h2>\n          <p>\n            The second step is to recognise the constituent parts in order to figure out the\n            structure of the band combo.\n          </p>\n          <div className=\"row\">\n            <div className=\"col-md-8 mb-3\">\n              <div className=\"card\">\n                <div className=\"card-body\">\n                  {two && two.length > 0 ? (\n                    <TokenTable tokens={two} />\n                  ) : (\n                    <span>No input specified</span>\n                  )}\n                </div>\n              </div>\n            </div>\n            <div className=\"col-md-4 small\">\n              <ol>\n                <li>ID bands without a colour will be designated as 'M' (metal)</li>\n              </ol>\n            </div>\n          </div>\n        </section>\n        <section className=\"my-5\">\n          <h2>3. Get Colours</h2>\n          <p>Match up the 'short colour' values with the corresponding CSS value.</p>\n          <div className=\"row\">\n            <div className=\"col-md-8 mb-3\">\n              <div className=\"card\">\n                <div className=\"card-body\">\n                  {three && three.length > 0 ? (\n                    <TokenTable tokens={three} />\n                  ) : (\n                    <span>No input specified</span>\n                  )}\n                </div>\n              </div>\n            </div>\n            <div className=\"col-md-4 small\">\n              <ol>\n                <li>\n                  As colours have been standardised to 'short colours', simple lookups can be done\n                  to get CSS values\n                </li>\n                <li>Invalid colours will not return a colour value</li>\n              </ol>\n            </div>\n          </div>\n        </section>\n        <section className=\"my-5\">\n          <h2>4. Validation</h2>\n          <em>TODO: validate colours, validate band structure</em>\n        </section>\n        <section className=\"my-5\">\n          <h2>5. Structure Creation</h2>\n          <em>TODO</em>\n        </section>\n      </div>\n    );\n  }\n}\n\nexport default NZBBTEFVisualise;\n","import React from 'react';\n\nimport NZBBTEFVisualise from './components/NZBBTEFVisualise';\nimport logo from './assets/logo.svg';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"bg-light py-5\">\n        <div className=\"container\">\n          <img src={logo} alt=\"NZBBTEF\" className=\"mb-3\" />\n          <h1>Prototype</h1>\n          <p className=\"lead\">New Zealand Bird Band Text Exchange Format</p>\n          <ul className=\"list-unstyled mb-0\">\n            <li>\n              <a href=\"https://gist.github.com/georgemoon/0c06e7ad0004ae9c47dd4ac0e1b425d5\">\n                Working Document\n              </a>\n            </li>\n            <li>\n              <a href=\"https://github.com/electricmagnetic/nzbbtef-prototype\">\n                Prototype Repository\n              </a>\n            </li>\n          </ul>\n        </div>\n      </header>\n      <main>\n        <div className=\"container\">\n          <NZBBTEFVisualise />\n        </div>\n      </main>\n      <footer className=\"bg-light py-5\">\n        <div className=\"container\">\n          <p>\n            A project of <a href=\"https://electricmagnetic.net\">ElectricMagnetic</a>\n          </p>\n        </div>\n      </footer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './assets/index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}