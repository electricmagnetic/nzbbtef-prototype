{"version":3,"sources":["assets/logo.svg","components/InputForm.js","components/TokenDisplay.js","components/ValidatorDisplay.js","nzbbtef/colours/transforms.js","nzbbtef/1-colourTransform.js","nzbbtef/2-tokenise.js","nzbbtef/colours/library.js","nzbbtef/3-getColours.js","nzbbtef/helpers.js","nzbbtef/4-validate.js","nzbbtef/5-createStructure.js","components/NZBBTEFVisualise.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","InputForm","props","handleChange","bind","event","this","onFieldChange","target","value","onSubmit","e","preventDefault","className","htmlFor","id","type","name","onChange","Component","TokenRow","token","colour","label","style","background","col","tokens","TokenDisplay","map","key","line","ValidatorRow","validator","ValidatorDisplay","validators","Object","entries","longColours","Metal","Uncoloured","Black","Grey","White","Red","Orange","Yellow","Pink","Crimson","Purple","Blue","Green","Brown","longCombinedColours","metal","uncoloured","paleorange","neonorange","fluoroorange","palepink","neonpink","fluoropink","hotpink","crimson","darkpink","lightpurple","paleblue","lightblue","mediumblue","darkblue","neongreen","fluorogreen","lightgreen","limegreen","palegreen","mediumgreen","darkgreen","black","grey","white","red","orange","yellow","pink","purple","blue","green","brown","transform","nzbbtef","colours","keys","reduce","currentSearch","replace","RegExp","colourTransform","symbolBandiser","moo","symbol","match","symbolColour","bandColour","WS","error","idBandiser","inscription","tokeniser","symbolBand","partSeparator","bandSeparator","legSeparator","colouredIdBand","uncolouredIdBand","nullBand","colouredBand","tokenise","reset","Array","from","assign","filter","colourLibrary","M","PO","NO","PP","NP","LPu","PB","LB","B","DB","NG","LG","PG","G","DG","K","Gr","W","R","O","Y","P","CP","Pu","Br","getColours","isColourToken","includes","countInstancesInArray","tokenTypes","search","count","tokenType","getSeparatorsAsString","separator","join","trim","compileValidators","values","isValid","validateLegSeparators","split","validatePartSeparators","separatorSubsetAsString","validateColours","areChildrenValid","validColour","undefined","validPredecessors","validate","legSeparators","partSeparators","defineParts","partSeparatorIndex","findIndex","hasPartSeparator","splice","slice","length","part","createStructure","legSeparatorIndex","hasLegSeparator","leg","defineLegs","NZBBTEFVisualise","state","handleNZBBTEFChange","setState","one","two","three","validation","structure","App","src","logo","alt","href","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ee51ad38.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.9e343206.svg\";","import React, { Component } from 'react';\n\nclass InputForm extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleChange(event) {\n    this.props.onFieldChange(event.target.value);\n  }\n\n  render() {\n    return (\n      <form\n        onSubmit={e => {\n          e.preventDefault();\n        }}\n      >\n        <div className=\"form-group\">\n          <label htmlFor=\"nzbbtef\">Band Combo (NZBBTEF)</label>\n          <input\n            className=\"form-control\"\n            id=\"nzbbtef\"\n            type=\"text\"\n            name=\"nzbbtef\"\n            value={this.props.value}\n            onChange={this.handleChange}\n          />\n        </div>\n      </form>\n    );\n  }\n}\n\nexport default InputForm;\n","import React from 'react';\n\nimport './TokenDisplay.css';\n\nconst TokenRow = ({ token }) => (\n  <div className=\"col-sm-auto my-1\">\n    <div className={`card ${token.type}`}>\n      <div className=\"card-body\">\n        <div className=\"token\">\n          {token.colour ? (\n            <div className=\"colour\">\n              {token.colour.label}{' '}\n              <div className=\"sample\" style={{ background: token.colour.value }} />\n            </div>\n          ) : (\n            <div className=\"value text-monospace\">\n              <strong>{token.value}</strong>\n            </div>\n          )}\n          <div className=\"metadata\">\n            <small>\n              {token.type}\n              {token.col && ` (${token.col})`}\n            </small>\n          </div>\n        </div>\n        {token.tokens && <TokenDisplay tokens={token.tokens} />}\n      </div>\n    </div>\n  </div>\n);\n\nconst TokenDisplay = ({ tokens }) => (\n  <div className=\"form-row my-n1\">\n    {tokens.map(\n      token =>\n        token.type !== 'WS' && (\n          <TokenRow token={token} key={token.key || `${token.line}:${token.col}`} />\n        )\n    )}\n  </div>\n);\n\nexport default TokenDisplay;\n","import React from 'react';\n\nconst ValidatorRow = ({ validator }) => (\n  <div className=\"col-sm-auto my-1\">\n    <div className=\"card\">\n      <div className=\"card-body\">\n        <span className=\"mr-2\">{validator.label}</span>\n        {validator.validator ? (\n          <span className=\"badge badge-pill badge-success\">Yes</span>\n        ) : (\n          <span className=\"badge badge-pill badge-danger\">No</span>\n        )}\n      </div>\n    </div>\n  </div>\n);\n\nconst ValidatorDisplay = ({ validators }) => (\n  <div className=\"form-row my-n1\">\n    {Object.entries(validators).map(([key, validator]) => (\n      <ValidatorRow key={key} validator={validator} />\n    ))}\n  </div>\n);\n\nexport default ValidatorDisplay;\n","// Order is important (from most specific to least specific, e.g. Pale Orange before Orange)\n\nconst longColours = {\n  Metal: 'M',\n  Uncoloured: 'M',\n  'Pale Orange': 'PO',\n  'Neon Orange': 'NO',\n  'Fluoro Orange': 'NO',\n  'Pale Pink': 'PP',\n  'Neon Pink': 'NP',\n  'Fluoro Pink': 'NP',\n  'Hot Pink': 'NP',\n  'Dark Pink': 'CP',\n  'Pale Blue': 'PB',\n  'Light Blue': 'LB',\n  'Medium Blue': 'B',\n  'Dark Blue': 'DB',\n  'Neon Green': 'NG',\n  'Fluoro Green': 'NG',\n  'Light Green': 'LG',\n  'Lime Green': 'LG',\n  'Pale Green': 'PG',\n  'Medium Green': 'G',\n  'Dark Green': 'DG',\n  'Light Purple': 'LPu',\n  Black: 'K',\n  Grey: 'Gr',\n  White: 'W',\n  Red: 'R',\n  Orange: 'O',\n  Yellow: 'Y',\n  Pink: 'P',\n  Crimson: 'CP',\n  Purple: 'Pu',\n  Blue: 'B',\n  Green: 'G',\n  Brown: 'Br',\n};\n\nconst longCombinedColours = {\n  metal: 'M',\n  uncoloured: 'M',\n  paleorange: 'PO',\n  neonorange: 'NO',\n  fluoroorange: 'NO',\n  palepink: 'PP',\n  neonpink: 'NP',\n  fluoropink: 'NP',\n  hotpink: 'NP',\n  crimson: 'CP',\n  darkpink: 'CP',\n  lightpurple: 'LPu',\n  paleblue: 'PB',\n  lightblue: 'LB',\n  mediumblue: 'B',\n  darkblue: 'DB',\n  neongreen: 'NG',\n  fluorogreen: 'NG',\n  lightgreen: 'LG',\n  limegreen: 'LG',\n  palegreen: 'PG',\n  mediumgreen: 'G',\n  darkgreen: 'DG',\n  black: 'K',\n  grey: 'Gr',\n  white: 'W',\n  red: 'R',\n  orange: 'O',\n  yellow: 'Y',\n  pink: 'P',\n  purple: 'Pu',\n  blue: 'B',\n  green: 'G',\n  brown: 'Br',\n};\n\nconst shortColours = {\n  M: 'Metal',\n  PO: 'Pale Orange',\n  NO: 'Neon Orange',\n  PP: 'Pale Pink',\n  NP: 'Neon Pink',\n  LPu: 'Light Purple',\n  PB: 'Pale Blue',\n  LB: 'Light Blue',\n  B: 'Medium Blue',\n  DB: 'Dark Blue',\n  NG: 'Neon Green',\n  LG: 'Light Green',\n  PG: 'Pale Green',\n  G: 'Medium Green',\n  DG: 'Dark Green',\n  K: 'Black',\n  Gr: 'Grey',\n  W: 'White',\n  R: 'Red',\n  O: 'Orange',\n  Y: 'Yellow',\n  P: 'Pink',\n  CP: 'Crimson',\n  Pu: 'Purple',\n  Br: 'Brown',\n};\n\nexport { longColours, longCombinedColours, shortColours };\n","import { longColours, longCombinedColours } from './colours/transforms';\n\n/**\n This function iterates over the colour object given, doing a (word bounded) find/replace.\n - Use of \\b necessary to not transform PaleBlue to PaleB\n - Double backslash because string escaping necessary\n */\nconst transform = (nzbbtef, colours) =>\n  Object.keys(colours).reduce(\n    (nzbbtef, currentSearch) =>\n      nzbbtef.replace(new RegExp(`\\\\b${currentSearch}\\\\b`, 'gi'), colours[currentSearch]),\n    nzbbtef\n  );\n\nconst colourTransform = nzbbtef => transform(transform(nzbbtef, longColours), longCombinedColours);\n\nexport default colourTransform;\n","import * as moo from 'moo';\n\nlet symbolBandiser = moo.compile({\n  symbol: { match: /\\S+\\son\\s/, value: value => value.match(/\\S+/)[0] },\n  symbolColour: /^[a-zA-Z]+/,\n  bandColour: /[a-zA-Z]+$/,\n  WS: /[ \\t]+/,\n  error: moo.error,\n});\n\nlet idBandiser = moo.compile({\n  bandColour: /^[a-zA-Z]+/,\n  inscription: { match: /\\(\\S+\\)/, value: value => value.match(/[^()]+/)[0] },\n  error: moo.error,\n});\n\nlet tokeniser = moo.compile({\n  symbolBand: /\\w+\\s\\S+\\son\\s\\w+/,\n  partSeparator: /\\/\\//,\n  bandSeparator: /\\//,\n  legSeparator: /-/,\n  colouredIdBand: /[a-zA-Z]+\\(\\S+\\)/,\n  uncolouredIdBand: /\\(\\S+\\)/,\n  nullBand: /x/,\n  colouredBand: /[a-zA-Z]+/,\n  WS: /[ \\t]+/,\n  error: moo.error,\n});\n\n/**\n Tokenise the string using `moo` as per the rules defined above, then further process certain types further.\n */\nconst tokenise = nzbbtef => {\n  tokeniser.reset(nzbbtef);\n\n  const allTokens = Array.from(tokeniser).map(token => {\n    // If nested token, initialise tokeniser\n    switch (token.type) {\n      case 'symbolBand':\n        symbolBandiser.reset(token.value);\n        break;\n      case 'uncolouredIdBand':\n        idBandiser.reset(`M${token.value}`); // Assume metal band\n        break;\n      case 'colouredIdBand':\n        idBandiser.reset(token.value);\n        break;\n      default:\n        break;\n    }\n\n    // Depending on type, use tokeniser (as initialised) or otherwise just return the token as is\n    switch (token.type) {\n      case 'symbolBand':\n        return Object.assign(\n          {},\n          token,\n          { type: 'tokenisedSymbolBand' },\n          { tokens: Array.from(symbolBandiser) }\n        );\n      case 'uncolouredIdBand':\n      case 'colouredIdBand':\n        return Object.assign(\n          {},\n          token,\n          { type: 'tokenisedIdBand' },\n          { tokens: Array.from(idBandiser) }\n        );\n      default:\n        return token;\n    }\n  });\n\n  // Remove whitespace tokens as they are not helpful after tokenisation\n  return allTokens.filter(token => token.type !== 'WS');\n};\n\nexport default tokenise;\n","const colourLibrary = {\n  M: {\n    label: 'Metal',\n    value: 'linear-gradient(to right,#808080, #ddd, #808080)',\n  },\n  PO: {\n    label: 'Pale Orange',\n    value: '#FFD03B',\n  },\n  NO: {\n    label: 'Neon Orange',\n    value: '#FFB343',\n  },\n  PP: {\n    label: 'Pale Pink',\n    value: '#FBC6B7',\n  },\n  NP: {\n    label: 'Neon Pink',\n    value: '#FF4BF2',\n  },\n  LPu: {\n    label: 'Light Purple',\n    value: '#AE5DFF',\n  },\n  PB: {\n    label: 'Pale Blue',\n    value: '#9EC7F8',\n  },\n  LB: {\n    label: 'Light Blue',\n    value: '#2B8FB3',\n  },\n  B: {\n    label: 'Medium Blue',\n    value: '#2B8FB3',\n  },\n  DB: {\n    label: 'Dark Blue',\n    value: '#0000D6',\n  },\n  NG: {\n    label: 'Neon Green',\n    value: '#00FF00',\n  },\n  LG: {\n    label: 'Light Green',\n    value: '#ABFE82',\n  },\n  PG: {\n    label: 'Pale Green',\n    value: '#4DC350',\n  },\n  G: {\n    label: 'Medium Green',\n    value: '#00A800',\n  },\n  DG: {\n    label: 'Dark Green',\n    value: '#003A00',\n  },\n  K: {\n    label: 'Black',\n    value: '#000000',\n  },\n  Gr: {\n    label: 'Grey',\n    value: '#808080',\n  },\n  W: {\n    label: 'White',\n    value: '#ffffff',\n  },\n  R: {\n    label: 'Red',\n    value: '#DA0000',\n  },\n  O: {\n    label: 'Orange',\n    value: '#FF6600',\n  },\n  Y: {\n    label: 'Yellow',\n    value: '#F4EE00',\n  },\n  P: {\n    label: 'Pink',\n    value: '#FE94FE',\n  },\n  CP: {\n    label: 'Crimson',\n    value: '#CC044B',\n  },\n  Pu: {\n    label: 'Purple',\n    value: '#9900CC',\n  },\n  Br: {\n    label: 'Brown',\n    value: '#996633',\n  },\n};\n\nexport default colourLibrary;\n","import colourLibrary from './colours/library';\n\nconst getColours = tokens => {\n  return tokens.map(token => {\n    const isColourToken = ['symbolColour', 'bandColour', 'colouredBand'].includes(token.type);\n\n    return Object.assign(\n      {},\n      token,\n      { isColourToken: isColourToken },\n      isColourToken && { colour: colourLibrary[token.value] },\n      token.tokens && { tokens: getColours(token.tokens) }\n    );\n  });\n};\nexport default getColours;\n","/**\n  Helper function that counts the number of the given search term in the array specified\n */\nconst countInstancesInArray = (tokenTypes, search) =>\n  tokenTypes.reduce((count, tokenType) => (tokenType.includes(search) ? (count += 1) : count), 0);\n\n/**\n  Helper function that compile the separators as a string separated by spaces.\n */\nconst getSeparatorsAsString = tokens =>\n  tokens\n    .filter(token => token.type.includes('Separator'))\n    .map(separator => separator.type)\n    .join(' ')\n    .trim();\n\n/**\n  Helper function that compiles logic across validators (all must be true to be evaluated as true)\n */\nconst compileValidators = validators =>\n  Object.values(validators).reduce((isValid, validator) => validator.validator && isValid, true);\n\nexport { countInstancesInArray, getSeparatorsAsString, compileValidators };\n","import { countInstancesInArray, getSeparatorsAsString, compileValidators } from './helpers';\n\n/**\n  Only 0 to 1 legSeparators permissible\n */\nconst validateLegSeparators = tokens =>\n  countInstancesInArray(getSeparatorsAsString(tokens).split(' '), 'legSeparator') <= 1;\n\n/**\n  Only 0 to 1 partSeparators permissible per leg.\n  Compiles the token types as a string, then does analysis between legSeparator and partSeparator.\n */\nconst validatePartSeparators = tokens =>\n  getSeparatorsAsString(tokens)\n    .split('legSeparator')\n    .reduce(\n      (isValid, separatorSubsetAsString) =>\n        countInstancesInArray(separatorSubsetAsString.split(' '), 'partSeparator') <= 1 && isValid,\n      true\n    );\n\n/**\n  Validates that all tokens that should be have a colour, have a valid colour.\n  Also needs to analyse child components (e.g. bandColour).\n  Logic constructed based on whether a token is a colour token, and if it has children.\n */\nconst validateColours = tokens => {\n  return tokens.reduce((isValid, token) => {\n    const validators = Object.assign(\n      {},\n      token.tokens && { areChildrenValid: { validator: validateColours(token.tokens) } },\n      token.isColourToken && { validColour: { validator: token.colour !== undefined } },\n      { validPredecessors: { validator: isValid } }\n    );\n\n    return compileValidators(validators);\n  }, true);\n};\n\nconst validate = tokens => {\n  const validators = {\n    legSeparators: { label: 'Leg separators valid?', validator: validateLegSeparators(tokens) },\n    partSeparators: { label: 'Part separators valid?', validator: validatePartSeparators(tokens) },\n    colours: { label: 'Colours valid?', validator: validateColours(tokens) },\n  };\n\n  const isValid = compileValidators(validators);\n\n  return {\n    isValid: isValid,\n    validators: validators,\n  };\n};\n\nexport default validate;\n","/**\n  Extracts parts based on position of partSeparator (if one exists)\n */\nconst defineParts = tokens => {\n  const partSeparatorIndex = tokens.findIndex(token => token.type === 'partSeparator');\n  const hasPartSeparator = partSeparatorIndex >= 0;\n\n  // Drop part separator token once it has been consumed\n  hasPartSeparator && tokens.splice(partSeparatorIndex, 1);\n\n  const parts = [\n    {\n      type: 'tibia',\n      key: 'tibia',\n      tokens: hasPartSeparator ? tokens.slice(0, partSeparatorIndex) : [],\n    },\n    {\n      type: 'tarsus',\n      key: 'tarsus',\n      tokens: hasPartSeparator ? tokens.slice(partSeparatorIndex, tokens.length) : tokens,\n    },\n  ];\n\n  return parts.filter(part => part.tokens.length > 0);\n};\n\n/**\n  Extracts legs based on position of legSeparator (if one exists)\n */\nconst defineLegs = tokens => {\n  const legSeparatorIndex = tokens.findIndex(token => token.type === 'legSeparator');\n  const hasLegSeparator = legSeparatorIndex >= 0;\n\n  // Drop leg separator token once it has been consumed\n  hasLegSeparator && tokens.splice(legSeparatorIndex, 1);\n\n  const legs = hasLegSeparator\n    ? [\n        { type: 'left', key: 'left', tokens: tokens.slice(0, legSeparatorIndex) },\n        { type: 'right', key: 'right', tokens: tokens.slice(legSeparatorIndex, tokens.length) },\n      ]\n    : [{ type: 'unspecified', key: 'unspecified', tokens: tokens }];\n\n  return legs.filter(leg => leg.tokens.length > 0);\n};\n\n/**\n  Defines structure by legs, then iterates over legs to define part structure.\n */\nconst createStructure = tokens => {\n  const legs = defineLegs(tokens);\n\n  return legs.map(leg => Object.assign({}, leg, { tokens: defineParts(leg.tokens) }));\n};\n\nexport default createStructure;\n","import React, { Component } from 'react';\n\nimport InputForm from './InputForm';\nimport TokenDisplay from './TokenDisplay';\nimport ValidatorDisplay from './ValidatorDisplay';\n\nimport colourTransform from '../nzbbtef/1-colourTransform';\nimport tokenise from '../nzbbtef/2-tokenise';\nimport getColours from '../nzbbtef/3-getColours';\nimport validate from '../nzbbtef/4-validate';\nimport createStructure from '../nzbbtef/5-createStructure';\n\nclass NZBBTEFVisualise extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      nzbbtef: '',\n    };\n\n    this.handleNZBBTEFChange = this.handleNZBBTEFChange.bind(this);\n  }\n\n  handleNZBBTEFChange(nzbbtef) {\n    this.setState({ nzbbtef: nzbbtef });\n  }\n\n  render() {\n    const one = colourTransform(this.state.nzbbtef);\n    const two = tokenise(one);\n    const three = getColours(two);\n    const validation = validate(three);\n    const structure = validation.isValid && createStructure(three);\n\n    return (\n      <div className=\"nzbbtef\">\n        <section className=\"sticky-top mb-5 py-3 bg-light\">\n          <div className=\"container\">\n            <InputForm onFieldChange={this.handleNZBBTEFChange} value={this.state.nzbbtef} />\n          </div>\n        </section>\n        <div className=\"container\">\n          <section className=\"my-5\">\n            <h2>1. Colour Transformation</h2>\n            <p>\n              The first step is to convert long colour names into short colour names.\n              <br />\n              This is so that colours with one words (e.g. Dark Green) can be appropriately\n              processed.\n            </p>\n            <div className=\"row\">\n              <div className=\"col-md-9 mb-3\">\n                <div className=\"card\">\n                  <div className=\"card-body\">\n                    {one ? <samp>{one}</samp> : <span>No input specified</span>}\n                  </div>\n                </div>\n              </div>\n              <div className=\"col-md-3 small\">\n                <ol>\n                  <li>Colours can be written as one or one words (Pale Blue or PaleBlue)</li>\n                  <li>Colour names are case insensitive</li>\n                  <li>\n                    Colour names do not feature elsewhere (e.g. as symbols or as inscriptions)\n                  </li>\n                </ol>\n              </div>\n            </div>\n          </section>\n          <section className=\"my-5\">\n            <h2>2. Tokenisation</h2>\n            <p>\n              The second step is to recognise the constituent parts in order to figure out the\n              structure of the band combo.\n            </p>\n            <div className=\"row\">\n              <div className=\"col-md-9 mb-3\">\n                <div className=\"card\">\n                  <div className=\"card-body\">\n                    {two && two.length > 0 ? (\n                      <TokenDisplay tokens={two} />\n                    ) : (\n                      <span>No input specified</span>\n                    )}\n                  </div>\n                </div>\n              </div>\n              <div className=\"col-md-3 small\">\n                <ol>\n                  <li>ID bands without a colour are designated as 'M' (metal)</li>\n                  <li>\n                    <code>WS</code> tokens (whitespace) are removed\n                  </li>\n                </ol>\n              </div>\n            </div>\n          </section>\n          <section className=\"my-5\">\n            <h2>3. Get Colours</h2>\n            <p>Match up the 'short colour' values with the corresponding CSS value.</p>\n            <div className=\"row\">\n              <div className=\"col-md-9 mb-3\">\n                <div className=\"card\">\n                  <div className=\"card-body\">\n                    {three && three.length > 0 ? (\n                      <TokenDisplay tokens={three} />\n                    ) : (\n                      <span>No input specified</span>\n                    )}\n                  </div>\n                </div>\n              </div>\n              <div className=\"col-md-3 small\">\n                <ol>\n                  <li>\n                    As colours have been standardised to 'short colours', simple lookups can be done\n                    to get CSS values\n                  </li>\n                  <li>Invalid colours do not return a colour value</li>\n                </ol>\n              </div>\n            </div>\n          </section>\n          <section className=\"my-5\">\n            <h2>Validation</h2>\n            <p>Run validations across entire band combo.</p>\n            <div className=\"row\">\n              <div className=\"col-md-9 mb-3\">\n                <div className=\"card\">\n                  <div className=\"card-body\">\n                    {validation && <ValidatorDisplay validators={validation.validators} />}\n                  </div>\n                </div>\n              </div>\n              <div className=\"col-md-3 small\"></div>\n            </div>\n          </section>\n          <section className=\"my-5\">\n            <h2>Structure Creation</h2>\n            <div className=\"row\">\n              <div className=\"col-md-9 mb-3\">\n                <div className=\"card\">\n                  <div className=\"card-body\">\n                    {structure && structure.length > 0 ? (\n                      <TokenDisplay tokens={structure} />\n                    ) : (\n                      <span>No valid input received</span>\n                    )}\n                  </div>\n                </div>\n              </div>\n              <div className=\"col-md-3 small\"></div>\n            </div>\n          </section>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default NZBBTEFVisualise;\n","import React from 'react';\n\nimport NZBBTEFVisualise from './components/NZBBTEFVisualise';\nimport logo from './assets/logo.svg';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"bg-light py-5\">\n        <div className=\"container\">\n          <img src={logo} alt=\"NZBBTEF\" className=\"mb-3\" />\n          <h1>Prototype</h1>\n          <p className=\"lead\">New Zealand Bird Band Text Exchange Format</p>\n          <ul className=\"list-unstyled mb-0\">\n            <li>\n              <a href=\"https://gist.github.com/georgemoon/0c06e7ad0004ae9c47dd4ac0e1b425d5\">\n                Working Document\n              </a>\n            </li>\n            <li>\n              <a href=\"https://github.com/electricmagnetic/nzbbtef-prototype\">\n                Prototype Repository\n              </a>\n            </li>\n          </ul>\n        </div>\n      </header>\n      <main>\n        <NZBBTEFVisualise />\n      </main>\n      <footer className=\"bg-light py-5\">\n        <div className=\"container\">\n          <p>\n            A project of <a href=\"https://electricmagnetic.net\">ElectricMagnetic</a>\n          </p>\n        </div>\n      </footer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './assets/index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}